/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Some portions of this file were modeled after the example Java 1.5
 * parser included with JavaCC. The following license applies to those
 * portions:
 *
 * Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * Notice:
 * This file is based off 'idl.jj' from the Apache Avro (TM) project.
 * The reserved keywords list is taken from 'thrift.ll' from the Apache Thrift (TM) project.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = true;
  ERROR_REPORTING = true;
  STATIC = false;
  FORCE_LA_CHECK = true;
  JDK_VERSION = "1.6";
}

PARSER_BEGIN(AnoaParser)

package com.adgear.anoa.compiler;

import com.adgear.anoa.compiler.AnoaBinaryNode;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.net.URL;

import org.apache.avro.Schema;
import org.apache.avro.Schema.Field;
import org.apache.avro.Schema.Type;
import org.apache.avro.Protocol;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.node.BooleanNode;
import org.codehaus.jackson.node.DoubleNode;
import org.codehaus.jackson.node.JsonNodeFactory;
import org.codehaus.jackson.node.LongNode;
import org.codehaus.jackson.node.TextNode;

/**
 * Grammar to parse the Anoa language into an Avro Protocol.
 *
 * Note: each instance is not thread-safe, but multiple separate instances are safely independent.
 */
final public class AnoaParser extends AnoaParserBase {

  private String namespace;
  private File baseDir;
  private ClassLoader resourceLoader;

  private AnoaParser(String namespace,
                     File baseDir,
                     ClassLoader resourceLoader,
                     List<String> ancestry,
                     URL input)
      throws IOException {
    this(input.openStream(), "UTF-8");
    this.namespace = namespace;
    this.baseDir = baseDir;
    this.resourceLoader = resourceLoader;
    this.ancestry.addAll(ancestry);
    this.ancestry.add(namespace);
  }

  private AnoaParser(String namespace, AnoaParser parent) throws IOException {
    this(namespace,
         parent.baseDir,
         parent.resourceLoader,
         parent.ancestry,
         toURL(namespace, parent.baseDir, parent.resourceLoader));
  }

  AnoaParser(String namespace, File baseDir, ClassLoader resourceLoader) throws IOException {
    this(namespace,
         baseDir,
         resourceLoader,
         new ArrayList<String>(),
         toURL(namespace, baseDir, resourceLoader));
  }

  @Override
  public void close() throws IOException {
    jj_input_stream.inputStream.close();
  }

  @Override
  String getNamespace() {
    return namespace;
  }

  @Override
  protected Protocol parse(String namespace) throws IOException, ParseException {
    return new AnoaParser(namespace, this).CompilationUnit();
  }
}

PARSER_END(AnoaParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

SKIP :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

SKIP :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : DOC_COMMENT
|
  "/*" : MULTI_LINE_COMMENT
}

<DOC_COMMENT,MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

<DOC_COMMENT>
SPECIAL_TOKEN :
{
  <"*/" > { AnoaParser.setDoc(image.substring(0, image.length() - 2)); } : DEFAULT
}

<MULTI_LINE_COMMENT>
SKIP :
{
  <"*/" > : DEFAULT
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < BOOLEAN: "boolean" > | < FALSE: "false" > | < TRUE: "true" >
| < BYTES: "bytes" >  | < STRING: "string" >
| < INTEGER: "integer" > | < RATIONAL: "rational" > | < F64: "float64" >
| < I8: "sint8" > | < U8: "uint8" > | < I16: "sint16" >
| < U16: "uint16" > | < I32: "sint32" > | < U32: "uint32" >
| < LIST: "list" > | < SET: "set" > | < MAP: "map" >
}


/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL: ("-")? ( <DECIMAL_LITERAL> | <HEX_LITERAL> | <OCTAL_LITERAL> ) (["l","L"])? >
| < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
| < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
| < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        ("-")? ( <DECIMAL_FLOATING_POINT_LITERAL> | <HEXADECIMAL_FLOATING_POINT_LITERAL> )
  >
| < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
| < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
| < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{ < IDENTIFIER: ["a"-"z"] ( ["_","a"-"z","0"-"9"] )* >
| < QUALIFIED_IDENTIFIER:
      ["a"-"z"] ( ["_","a"-"z","0"-"9"] )*
      ( "." ["a"-"z"] ( ["_","a"-"z","0"-"9"] ) * ) +
  >
| < ENUM_SYMBOL: ["A"-"Z"] ( ("_")? ["A"-"Z","0"-"9"] )* >
| < FIELD_ALIAS_IDENTIFIER: ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_","0"-"9"])* >
| < MALFORMED_IDENTIFIER: (["a"-"z","A"-"Z","_","0"-"9","."])+ >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" > | < RPAREN: ")" >
| < LBRACE: "{" > | < RBRACE: "}" >
| < LBRACK: "[" > | < RBRACK: "]" >
| < LT: "<" > | < GT: ">" >
| < COLON : ":" > | < AT: "@" > | < SEMICOLON: ";" > | < COMMA: "," > | < TICK: "`" >
}


/*********************************************
 * THE ANOA LANGUAGE GRAMMAR STARTS HERE *
 *********************************************/

/**
 * The input to AnoaParser is a CompilationUnit, which is currently just a single Avro Protocol.
 */
Protocol CompilationUnit():
{ }
{
  ( TypeDeclaration() ) *
  <EOF>
  { return this.exportProtocol(); }
}

void TypeDeclaration():
{
  Token t;
  String typeName;
  String doc = getDoc();
  List<String> aliases = new ArrayList<String>();
  List<String> enumSymbols = new ArrayList<String>();
  List<Field> structFields = new ArrayList<Field>();
  Schema type;
}
{
  typeName = TypeName()
  ( TypeAlias(typeName, aliases) ) *
  (
    <LBRACK> ( EnumSymbol(enumSymbols) ) + <RBRACK>
    { type = Schema.createEnum(typeName, doc, this.getNamespace(), enumSymbols); }
  |
    <LBRACE> ( FieldDeclaration(structFields) ) + <RBRACE>
    {
      type = Schema.createRecord(typeName, doc, this.getNamespace(), false);
      type.setFields(structFields);
    }
  )
  { this.addType(type, aliases); }
}

Token Identifier() :
{ Token id; }
{
  ( id = <BOOLEAN>
  | id = <BYTES> | id = <STRING>
  | id = <INTEGER> | id = <RATIONAL>
  | id = <I8> | id = <U8> | id = <I16> | id = <U16> | id = <I32> | id = <U32>
  | id = <LIST> | id = <SET> | id = <MAP>
  | id = <IDENTIFIER>
  )
  { return id; }
}

String TypeName() :
{ Token t; }
{
  t = Identifier()
  { return this.getTypeName(t); }
}

void TypeAlias(String typeName, List<String> aliases) :
{ Token t; }
{
  ( <COMMA> ) ?
  ( t = Identifier() | t = <QUALIFIED_IDENTIFIER> )
  { this.addTypeAlias(t, typeName, aliases); }
}

void EnumSymbol(List<String> enumSymbols) :
{ Token t; }
{
  t = <ENUM_SYMBOL>
  { this.addEnumSymbol(t, enumSymbols); }
  ( <COMMA> | <SEMICOLON> ) ?
}

void FieldDeclaration(List<Field> fields) :
{
  Token ordinal;
  Field auxField;
  String fieldName = null;
}
{
  ordinal = <INTEGER_LITERAL>
  <COLON>
  auxField = FieldType()
  ( FieldPropsDeclaration(auxField) ) *
  (
    <SEMICOLON>
    { fieldName = "field__" + ordinal.image; }
  |
    fieldName = FieldName(fields)
    ( FieldAlias(auxField, fieldName, fields) ) *
    <SEMICOLON>
  )
  { this.addField(fields, ordinal, fieldName, auxField); }
}

Field FieldType() :
{
  Token t;
  Schema type;
  JsonNode defaultValue;
}
{
  (
    <BOOLEAN>    { type = Schema.create(Type.BOOLEAN); }  defaultValue = BooleanDefault()
  |
    <BYTES>      { type = Schema.create(Type.BYTES);   }  defaultValue = BytesDefault()
  |
    <STRING>     { type = Schema.create(Type.STRING);  }  defaultValue = StringDefault()
  |
    ( t = <RATIONAL> | t = <F64> )
    type = RationalType(t)
    defaultValue = RationalDefault(type, t)
  |
    ( t = <INTEGER> | t = <I8> | t = <U8> | t = <I16> | t = <U16> | t = <I32> | t = <U32> )
    type = IntegerType(t)
    defaultValue = IntegerDefault(type, t)
  |
    type = ReferenceType()
    {
      defaultValue = (type.getType() == Type.ENUM)
                     ? TextNode.valueOf(type.getEnumSymbols().get(0))
                     : JsonNodeFactory.instance.objectNode();
    }
  |
    ( t = <LIST> | t = <SET> ) <LT> type = WrappedType() <GT>
    { type = buildCollectionType(type, t); defaultValue = JsonNodeFactory.instance.arrayNode(); }
  |
    <MAP> <LT> <STRING> <COMMA>     type = WrappedType() <GT>
    { type = buildMapType(type);           defaultValue = JsonNodeFactory.instance.objectNode(); }
  )
  { return new Field("_UNNAMED", type, getDoc(), defaultValue); }
}

JsonNode BooleanDefault() :
{ BooleanNode n = BooleanNode.FALSE; }
{
  ( <LPAREN>
    ( <FALSE> | <TRUE> { n = BooleanNode.TRUE; } )
  <RPAREN> ) ?
  { return n; }
}

JsonNode BytesDefault() :
{
  Token t;
  long byteValue;
  ByteArrayOutputStream baos = new ByteArrayOutputStream();
}
{
  ( <LPAREN>
    (
      t = <INTEGER_LITERAL>
      { baos.write(this.getByteLiteral(t)); }
    ) +
  <RPAREN> ) ?
  { return AnoaBinaryNode.valueOf(baos.toByteArray()); }
}

JsonNode StringDefault() :
{ String s = ""; }
{
  ( <LPAREN>
    s = StringLiteral()
  <RPAREN> ) ?
  { return TextNode.valueOf(s); }
}

String StringLiteral() :
{ Token t; }
{
  t = <STRING_LITERAL>
  { return this.getStringLiteral(t); }
}

Schema RationalType(Token token) :
{
  if ("float64".equals(token.image)) {
    return this.buildRationalType(null, null, null, token);
  }
  Number min = null;
  Number max = null;
  Long mantissa = null;
}
{
  <LBRACK>
  ( min = FloatingPointLiteral() | min = IntegerLiteral()) ?
  <COMMA>
  ( max = FloatingPointLiteral() | max = IntegerLiteral() ) ?
  <COMMA>
  ( mantissa = IntegerLiteral() ) ?
  <RBRACK>
  { return this.buildRationalType(min, max, mantissa, token); }
}

double FloatingPointLiteral() :
{ Token t; }
{
  t = <FLOATING_POINT_LITERAL>
  { return this.getFloatLiteral(t); }
}

long IntegerLiteral() :
{ Token t; }
{
  t = <INTEGER_LITERAL>
  { return this.getIntegerLiteral(t); }
}

JsonNode RationalDefault(Schema type, Token token) :
{
  Double defval = null;
  long ldefval = 0L;
}
{
  ( <LPAREN> ( defval = FloatingPointLiteral() | ldefval = IntegerLiteral() ) <RPAREN> ) ?
  {
    if (defval == null) {
      defval = (double) ldefval;
    }
    return this.getRationalDefault(defval, type, token);
  }
}

Schema IntegerType(Token token) :
{
  switch(token.image) {
    case "sint8" : return this.buildIntegerType(-128L, 0x7FL, token);
    case "uint8" : return this.buildIntegerType(0L, 0xFFL, token);
    case "sint16": return this.buildIntegerType(-32768L, 0x7FFFL, token);
    case "uint16": return this.buildIntegerType(0L, 0xFFFFL, token);
    case "sint32": return this.buildIntegerType((long) 0x80000000, 0x7FFFFFFFL, token);
    case "uint32": return this.buildIntegerType(0L, 0xFFFFFFFFL, token);
  }
  Long min = null;
  Long max = null;
}
{
  <LBRACK>
  ( min = IntegerLiteral() ) ?
  <COMMA>
  ( max = IntegerLiteral() ) ?
  <RBRACK>
  { return this.buildIntegerType(min, max, token); }
}

JsonNode IntegerDefault(Schema type, Token token) :
{ long defval = 0L; }
{
  ( <LPAREN> defval = IntegerLiteral() <RPAREN> ) ?
  { return this.getIntegerDefault(defval, type, token); }
}

Schema WrappedType() :
{
  Token t;
  Schema type; }
{
  ( <BOOLEAN>    { type = Schema.create(Type.BOOLEAN); }
  | <BYTES>      { type = Schema.create(Type.BYTES);   }
  | <STRING>     { type = Schema.create(Type.STRING);  }
  | t = <RATIONAL> type = RationalType(t)
  | ( t = <INTEGER> | t = <I8> | t = <U8> | t = <I16> | t = <U16> | t = <I32> | t = <U32> )
    type = IntegerType(t)
  | type = ReferenceType()
  )
  { return type; }
}

Schema ReferenceType() :
{ Token id; }
{
  ( id = <QUALIFIED_IDENTIFIER> | id = <IDENTIFIER> | <TICK> id = Identifier() <TICK> )
  { return this.getReferencedType(id); }
}

String FieldName(List<Field> structFields) :
{ Token t; }
{
  t = Identifier()
  { return this.getFieldName(t, structFields); }
}

void FieldAlias(Field auxField, String fieldName, List<Field> structFields) :
{ Token t; }
{
  ( <COMMA> ) ?
  ( t = <IDENTIFIER> | t = <FIELD_ALIAS_IDENTIFIER> )
  { this.addFieldAlias(auxField, t, fieldName, structFields); }
}

void FieldPropsDeclaration(Field field) :
{
  Token key;
  long longValue;
  double doubleValue;
  String stringValue;
  JsonNode node = BooleanNode.TRUE;
}
{
  <AT> key = Identifier()
  (
    <LPAREN>
    ( <TRUE>                               { node = BooleanNode.TRUE; }
    | <FALSE>                              { node = BooleanNode.FALSE; }
    | longValue = IntegerLiteral()         { node = LongNode.valueOf(longValue); }
    | doubleValue = FloatingPointLiteral() { node = DoubleNode.valueOf(doubleValue); }
    | stringValue = StringLiteral()        { node = TextNode.valueOf(stringValue); }
    )
    <RPAREN>
  ) ?
  { field.addProp(key.image, node); }
}


